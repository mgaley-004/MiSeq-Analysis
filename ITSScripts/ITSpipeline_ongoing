#~/bin/bash -l
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=24
#SBATCH --cpus-per-task=1
#SBATCH --mem=32gb
#SBATCH -t 48:00:00
#SBATCH --mail-type=ALL
#SBATCH --mail-user=galey004@umn.edu
#SBATCH -p small
#SBATCH -J ITSTEST
#SBATCH -o %j.out
#SBATCH -e %j.err

TERM=linux
export TERM
export FASTQLOC="/panfs/roc/groups/2/chun0157/data_release/umgc/miseq/200413_M00262_0047_000000000-J2LDF/Chun_Project_005_ITS_Redemult"
export SITES="*NP*.gz *BRL*.gz"
export PREFIX=its19
export INTERPREFIX=mothur1
export ITSXOUT=itsxo
export PROCESSORS=$(nproc)
export WDIR="/scratch.global/galey_ex"
export REFERENCEFASTA=/panfs/roc/groups/2/chun0157/shared/UNITE.ITS1.good.fasta
export REFERENCETAX=/panfs/roc/groups/2/chun0157/shared/UNITE.ITS1.good.full.taxonomy
export FINALMOTHUR=mothur2
export FINALFILENAME=pipeline_output.csv

if [ ! -d "$WDIR" ]; then
	echo "creating directory $WDIR"
	mkdir $WDIR
else
	echo "$WDIR exists. Make sure this directory is empty before beginning."
fi

cd $WDIR
BATCH1=its_part1.batch
BATCH2=its_part2.batch
if [ ! -f "$BATCH1" ]; then
	echo "downloading $BATCH1"
	wget https://raw.githubusercontent.com/mgaley-004/MiSeq-Analysis/main/ITSScripts/its_part1.batch
fi
if [ ! -f "$BATCH2" ]; then
	echo "downloading $BATCH2"
	wget https://raw.githubusercontent.com/mgaley-004/MiSeq-Analysis/main/ITSScripts/its_part2.batch
fi

#install the latest copy of mothur
wget https://github.com/mothur/mothur/releases/download/v1.44.3/Mothur.linux.zip
unzip Mothur.linux.zip

#copy the needed files from the shared directory
cd $FASTQLOC
cp $SITES $WDIR

#change to scratch directory
cd $WDIR

#this first mothur batch script processes the fastq files and exports raw sequences
mothur/./mothur "its_part1.batch"

#perl and hmmer are needed to run itsx
module load perl
module load hmmer/3.1-snap20121016

#download itsx and extract it only if it ITSx_1.1.2 is not already installed in folder
FILE=ITSx_1.1.2
if [ ! -d "$FILE" ]; then
	echo "downloading ITSx"
	wget https://microbiology.se/sw/ITSx_1.1.2.tar.gz
	tar -xvf ITSx_1.1.2.tar.gz
else
	echo "ITSx exists, skipping download."
fi

#move the output of count.seqs to the itsx folder and then enter the folder
echo "Copying mothur output1 to ITSx folder"
cp $INTERPREFIX.fasta ITSx_1.1.2/$INTERPREFIX.fasta
cd ITSx_1.1.2

echo "Running ITSx on $INTERPREFIX.fasta"
#this line runs ITSx and extracts ITS1 and ITS2, then saves them as new fasta files. It also makes a summary.
./ITSx -i $INTERPREFIX.fasta -o $ITSXOUT -t f --cpu $PROCESSORS --summary T --graphical F --fasta T --preserve T --save_regions ITS1,ITS2 --anchor HMM

#to resume mothur, we have to remove sequences that didn't contain ITS1 from the count file. We will create a .accnos file using the original input and the ITS1 fasta files

#load python
module load python
#run the create_accnos python script
PYSCRIPT1=create_accnos.py
if [ ! -f "$PYSCRIPT1" ]; then
	echo "downloading create_accnos.py"
	wget https://raw.githubusercontent.com/mgaley-004/MiSeq-Analysis/main/ITSScripts/create_accnos.py
else
	echo "create_accnos.py exists, skipping download."
fi

echo "Running create_accnos.py"
python create_accnos.py $ITSXOUT.ITS1.fasta $INTERPREFIX.fasta nontargets.accnos
cp nontargets.accnos $WDIR/nontargets.accnos
cp $ITSXOUT.ITS1.fasta $WDIR/$ITSXOUT.ITS1.fasta

echo "Resuming mothur to classify sequences."
cd ../

#make a copy of blast
cp -r mothur/blast .

#resume mothur
mothur/./mothur "its_part2.batch"

#now calculate percent identity of the sequences using python
#to use this script, supply in order the output name you would like, the reference fasta file, the taxonomy file that mothur created for sequences (not the cons.taxonomy file for otus and not the equalized taxonomy file), and the last fasta file that mothur created. This script should fill those in for you if you've changed the variables at the top of the script.
PYSCRIPT2=computePercentIdentityParallel.py
if [ ! -f "$PYSCRIPT2" ]; then
	echo "downloading computePercentIdentityParallel.py"
	wget https://raw.githubusercontent.com/mgaley-004/MiSeq-Analysis/main/ITSScripts/computePercentIdentityParallel.py
else
	echo "computePercentIdentityParallel.py exists, skipping download."
fi

echo "Computing percent identity"

python computePercentIdentityParallel.py $FINALFILENAME $REFERENCEFASTA $FINALMOTHUR.taxonomy $FINALMOTHUR.fasta
#from here we will use some sort of thresholding to assign confidence in taxonomic IDs.